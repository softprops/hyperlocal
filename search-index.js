var searchIndex = new Map(JSON.parse('[\
["hyperlocal",{"doc":"<code>hyperlocal</code> provides Hyper bindings for Unix domain sockets.","t":"KFFNNNNNNNNNNNNNNNNNNNNNNNNNNNNN","n":["UnixClientExt","UnixConnector","Uri","borrow","borrow","borrow_mut","borrow_mut","call","clone","clone","clone_into","clone_into","connect","default","fmt","fmt","from","from","into","into","new","poll_ready","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","unix","unix"],"q":[[0,"hyperlocal"],[32,"http::uri"],[33,"hyper_util::client::legacy::connect::sealed"],[34,"tower::util::oneshot"],[35,"core::fmt"],[36,"core::fmt"],[37,"core::convert"],[38,"core::task::wake"],[39,"core::result"],[40,"core::task::poll"],[41,"core::any"],[42,"hyper_util::client::legacy::client"],[43,"http_body"],[44,"core::marker"]],"d":["Extension trait for constructing a hyper HTTP client over …","the <code>[UnixConnector]</code> can be used to construct a …","A convenience type that can be used to construct Unix …","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Create a new <code>[Uri]</code> from a socket address and a path","","","","","","","","","","Construct a client which speaks HTTP over a Unix domain …","Construct a client which speaks HTTP over a Unix domain …"],"i":[0,0,0,1,3,1,3,1,1,3,1,3,1,1,1,3,1,3,1,3,3,1,1,3,1,3,1,3,1,3,19,19],"f":"```{ce{}{}}000{{bd}c{}}{bb}{ff}{{ce}h{}{}}0{{cjd}{{l{ed}}}{}{}}{{}b}{{bn}A`}{{fn}A`}{cc{}}099{{cAb}f{{Af{Ad}}}}{{bAh}{{Al{{Aj{hc}}}}}{}};;{c{{Aj{e}}}{}{}}000{cAn{}}0{{}{{B`{bc}}}{BbBd}}0","c":[],"p":[[5,"UnixConnector",0],[5,"Uri",32],[5,"Uri",0],[1,"unit"],[5,"Internal",33],[5,"Oneshot",34],[5,"Formatter",35],[8,"Result",35],[1,"str"],[5,"Path",36],[10,"AsRef",37],[5,"Context",38],[6,"Result",39],[6,"Poll",40],[5,"TypeId",41],[5,"Client",42],[10,"Body",43],[10,"Send",44],[10,"UnixClientExt",0]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
